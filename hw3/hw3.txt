2. 
	s1: 1  
	s2: 
	  
	s1: 2 1 
	s2: 

	s1:
	s2: 2

	s1: 4 3
	s2: 2

	s1: 4 3
	s2:

	s1: 6 5 4 3
	s2:

3. 
a) 
theta(nlog(n)).

for (int i = 0; i < n; i ++)
    if (A[i] == 0) {
       for (int j = 1; j < n; j *= 2)
	  { /* do something that takes theta(1) time */ }
    }
The inner for loop runs in log(n) time because
it is a summation from k = 1 to log(n) of theta(1).
The outer for loop is a summation of log(n) from 0 to n,
which equates to nlog(n) based on the definition of a 
summation.

b)
theta(n^2)

int tally=0;
for (int i = 1; i < n; i ++)
{
   for (int j = i; j < n; j ++)
   {
	if (j % i == 0)
	{
	    for (int k = 1; k < n; k *= 2)
	    { 
		tally++;
	    }
	}
   }
}
The inner most for loop runs in log(n) time because the sequence of
run times is 1, 2, 4, 8, 16 ... which is a summation from k = 1 to log(n) 
of theta(1). However the loop only runs when j % i == 0. 
Notice the sequence of run times: n, n/2, n/3 ... 1 because i must be a 
factor of j. The summation of this sequence is from j = i to n-1 of theta(log(n))/j 
which is the definition of a harmonic series. This then becomes theta(log^2(n)). 
Then the outer for loop is a summation of theta(log(n)^2) from i = 1 to n, which is 
equivalent to theta(n(log(n)^2)). However when j % i != 0, the run time
is of the statements in the inner loop is theta(1) as only the if statement 
is ran. The run time sequence for the second for loop is n-1, n-2, n-3, ... 1,
which can be simplified into theta(n/2) total run time. The out for loop is a summation of
theta(n/2) from 1 to n-1, which results in theta(n^2) after dropping the constant 
theta(n^2) > theta(n(log(n)^2) so the worst run time is theta(n^2).

c)
theta(n^2)

int *a = new int [10];
int size = 10;
for (int i = 0; i < n; i ++) 
{
   if (i == size)
   {  
       int newsize = size+10;
       int *b = new int [newsize];
       for (int j = 0; j < size; j ++) b[j] = a[j];
       delete [] a;
       a = b;
       size = newsize;
   }
   a[i] = sqrt(i);
}

The inner most for loop is a summation from j = 0 to size.
Notice the size will always equal i because of the if block that
encompasses the loop and that size is always a multiple of ten. For now,
this for loop is a summation from j = 0 to i of theta(1) which equals
theta(i). This is also accompanied by the other statements which equals 
theta(1). This loop will only run when i == size and size is a multiple of ten.
So while the outer most for loop is a summation from i = 0
to n - 1 of theta(i) + theta(1), it is actually a summation from
i = 0 to n/10 of theta(10i) + theta(10). This equals theta(n^2 + n) 
which is simplified to theta(n^2). If the if block is not reached,
the line outside the if block will evaluate to theta(n) run time
but because theta(n) < theta(n^2), the run time is theta(n^2).

d)
theta(n)

int *a = new int [10];
int size = 10;
for (int i = 0; i < n; i ++) 
{
   if (i == size)
   {  
       int newsize = 2*size;
       int *b = new int [newsize];
       for (int j = 0; j < size; j ++) b[j] = a[j];
       delete [] a;
       a = b;
       size = newsize;
   }
   a[i] = sqrt(i);
}

The inner most for loop is a summation from j = 0 to size.
Notice the size will always equal i because of the if block that
encompasses the loop and that size is always equal to 10 * 2^x where 
x is between 0 and log(n). This summation of theta(1) (the run time of 
the statements in the inner most for loop) is equal to theta(log(10x)) 
based on these parameters The outer most loop is a summation from 
i = 0 to n. The thing being summed is normally theta(1) run time
but when i = size, it is theta(log(i)) +theta(1) run time. 
This happens when i =10 * 2^x and x is between 0 
and log(n). We can rewrite this summation to be from x = 1 to
log(n/10) of theta(10*2^x) + theta (10x). 
We can evaluate this to be theta(10*n/10) + theta(log(n/10)) = theta(n)
since theta(n) > theta(log(n/10)). Similarly when the if block condition
is not met, the run time of the program is theta(n).
